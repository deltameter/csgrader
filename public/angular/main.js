!function(){angular.module("general",[])}(),function(){angular.module("user",[]).run(["$http","Session",function($http,Session){$http.get("/api/profile").success(function(res){Session.create(res)}).error(function(res){Session.setCurrentUser({})})}])}(),function(){var app=angular.module("grader",["ui.router","general","user"]);app.config(["$locationProvider",function($locationProvider){$locationProvider.html5Mode(!0)}]),app.run(["$rootScope","AuthService","AuthResolver",function($rootScope,AuthService,AuthResolver){$rootScope.$on("$stateChangeStart",function(event,next){AuthResolver.bIsResolved()?(console.log("stateChangeStart resolved"),console.log("auth: "+AuthService.isAuthenticated())):AuthResolver.resolve().then(function(data){console.log("stateChangeStart not resolved"),console.log("auth: "+AuthService.isAuthenticated())})})}])}(),function(){angular.module("general").controller("NavController",["$http","AuthService",function($http,AuthService){this.bLoggedIn=AuthService.isAuthenticated()}])}(),function(){angular.module("general").config(["$stateProvider",function($stateProvider){$stateProvider.state("index",{url:"/",resolve:{auth:["AuthResolver",function(AuthResolver){return AuthResolver.bIsResolved()===!0||AuthResolver.resolve()}]},controller:["$state","AuthService",function($state,AuthService){console.log("controller called"),console.log("Controller auth: "+AuthService.isAuthenticated()),AuthService.isAuthenticated()?$state.go("dashboard"):$state.go("public")}]}),$stateProvider.state("public",{url:"/",templateUrl:"/angular/general/partials/index.general.html"})}])}(),function(){angular.module("user").controller("LoginController",["$state","$rootScope","AuthService",function($state,$rootScope,AuthService){var root=this;this.authMessage="",this.user={username:"",password:""},this.login=function(){AuthService.login(root.user).then(function(res){$state.go("profile")},function(res){root.authMessage=res.data.userMessage})}}]),angular.module("user").controller("DashboardController",["$state","Session",function($state,Session){this.user=Session.user}]),angular.module("user").controller("ProfileController",["$state","Session",function($state,Session){this.user=Session.user}])}(),function(){angular.module("user").config(["$stateProvider",function($stateProvider){$stateProvider.state("login",{url:"/login",templateUrl:"/angular/user/partials/auth.user.html",controller:"LoginController",controllerAs:"loginCtrl"}),$stateProvider.state("dashboard",{url:"",templateUrl:"/angular/user/partials/dashboard.html",controller:"DashboardController",controllerAs:"dashboardCtrl"}),$stateProvider.state("profile",{url:"/profile",templateUrl:"/angular/user/partials/profile.user.html",controller:"ProfileController",controllerAs:"profileCtrl"})}])}(),function(){angular.module("user").factory("AuthService",["$http","Session",function($http,Session){var authService={};return authService.login=function(credentials){return $http.post("/auth/local",credentials).then(function(res){return Session.create(res.data),res.data})},authService.isAuthenticated=function(){return Session.live()},authService}]),angular.module("user").service("Session",["$rootScope",function($rootScope){var root=this;this.user={},this.live=function(){return Object.keys(root.user).length>0},this.setCurrentUser=function(user){$rootScope.currentUser=user},this.create=function(user){$rootScope.currentUser=user,root.user=user},this.destroy=function(){$rootScope.currentUser=null,root.user=null}}]),angular.module("user").factory("AuthResolver",["$q","$rootScope","$state",function($q,$rootScope,$state){var bIsResolved=!1;return{resolve:function(){console.log("resolve asked");var deferred=$q.defer(),unwatch=$rootScope.$watch("currentUser",function(currentUser){angular.isDefined(currentUser)&&(currentUser?deferred.resolve(currentUser):deferred.reject(),bIsResolved=!0,unwatch())});return deferred.promise},bIsResolved:function(){return bIsResolved}}}])}();
//# sourceMappingURL=data:application/json;base64,
