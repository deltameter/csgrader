!function(){angular.module("assignments",[])}(),function(){angular.module("courses",[])}(),function(){angular.module("general",[])}(),angular.module("angularSlideables",[]).directive("slideable",function(){return{restrict:"C",compile:function(element,attr){var contents=element.html();return element.html('<div class="slideable_content" style="margin:0 !important; padding:0 !important" >'+contents+"</div>"),function(scope,element,attrs){attrs.duration=attrs.duration?attrs.duration:"1s",attrs.easing=attrs.easing?attrs.easing:"ease-in-out",element.css({overflow:"hidden",height:"0px",transitionProperty:"height",transitionDuration:attrs.duration,transitionTimingFunction:attrs.easing})}}}}).directive("slideToggle",function(){return{restrict:"A",link:function(scope,element,attrs){var target,content;attrs.expanded=!1,element.bind("click",function(){if(target||(target=document.querySelector(attrs.slideToggle)),content||(content=target.querySelector(".slideable_content")),attrs.expanded)target.style.height="0px";else{content.style.border="1px solid rgba(0,0,0,0)";var y=content.clientHeight;content.style.border=0,target.style.height=y+"px"}attrs.expanded=!attrs.expanded})}}}),function(){angular.module("user",[]).run(["$http","UserFactory",function($http,UserFactory){$http.get("/api/profile").success(function(res){UserFactory.setUser(res)}).error(function(res){UserFactory.setUser({})})}])}(),function(){var app=angular.module("grader",["ui.router","general","courses","user","assignments"]);app.config(["$locationProvider",function($locationProvider){$locationProvider.html5Mode(!0)}]),app.run(["$rootScope","AuthService","AuthResolver",function($rootScope,AuthService,AuthResolver){$rootScope.$on("$stateChangeStart",function(event,next){AuthResolver.bIsResolved()?(console.log("stateChangeStart resolved"),console.log("auth: "+AuthService.isAuthenticated())):AuthResolver.resolve().then(function(data){console.log("stateChangeStart not resolved"),console.log("auth: "+AuthService.isAuthenticated())})})}])}(),function(){angular.module("assignments").controller("AssignmentController",["$stateParams","UserFactory","AssignmentFactory",function($stateParams,UserFactory,AssignmentFactory){var vm=this;vm.user=UserFactory.getUser(),vm.courseCode=$stateParams.courseCode,vm.assignmentID=$stateParams.assignmentID,vm.assignment={},vm.question={},vm.memes=1;var getAssignment=function(){AssignmentFactory.getAssignment(vm.courseCode,vm.assignmentID).then(function(assignment){vm.assignment=assignment},function(err){})};this.contentTracker=function(n){console.log(n)},this.addQuestion=function(){AssignmentFactory.addQuestion(vm.courseCode,vm.assignmentID).then(function(res){console.log(res.data)},function(res){})},this.editQuestion=function(question){question.questionIndex=0,AssignmentFactory.editQuestion(vm.courseCode,vm.assignmentID,question).then(function(res){console.log(res)},function(res){console.log(res)})},getAssignment()}])}(),function(){angular.module("assignments").directive("question",function(){return{restrict:"E",templateUrl:"/angular/assignments/partials/question.html"}})}(),function(){angular.module("assignments").config(["$stateProvider",function($stateProvider){$stateProvider.state("root.assignment",{url:"/course/:courseCode/assignment/:assignmentID",templateUrl:"/angular/assignments/partials/assignment.html",controller:"AssignmentController",controllerAs:"assignmentCtrl"})}])}(),function(){angular.module("assignments").factory("AssignmentFactory",["$http",function($http){function createAssignment(courseCode,newAssignment){return $http.post("/api/course/"+courseCode+"/assignment/create",newAssignment)}function getAssignment(courseCode,assignmentID){return $http.get("/api/course/"+courseCode+"/assignment/"+assignmentID).then(function(res){var assignment=res.data,eI=0,qI=0;assignment.content=new Array(assignment.questions.length+assignment.exercises.length);for(var i=0;i<assignment.contentOrder.length;i++)assignment.contentOrder[i]?(assignment.content[i]=assignment.exercises[eI],assignment.content[i].type="exercise",eI++):(assignment.content[i]=assignment.questions[qI],assignment.content[i].type="question",qI++);return assignment},function(res){})}function addQuestion(courseCode,assignmentID){return $http.post("/api/course/"+courseCode+"/assignment/"+assignmentID+"/question/create")}function editQuestion(courseCode,assignmentID,question){return $http.put("/api/course/"+courseCode+"/assignment/"+assignmentID+"/question/edit",question)}return{createAssignment:createAssignment,getAssignment:getAssignment,addQuestion:addQuestion,editQuestion:editQuestion}}])}(),function(){angular.module("user").controller("DashboardController",["$state","$http","CourseFactory","UserFactory",function($state,$http,CourseFactory,UserFactory){var vm=this;this.newCourse={},this.courses=null,this.user=UserFactory.getUser();var getCourses=function(){CourseFactory.getCourses().then(function(res){vm.courses=res.data},function(res){})};this.createCourse=function(){CourseFactory.createCourse(vm.newCourse).then(function(res){console.log(res)})},getCourses()}]),angular.module("user").controller("CourseController",["$state","$http","$stateParams","UserFactory","CourseFactory","AssignmentFactory",function($state,$http,$stateParams,UserFactory,CourseFactory,AssignmentFactory){var vm=this;this.course=null,this.user=UserFactory.getUser(),this.newAssignment={};var getCourse=function(){CourseFactory.getCourse($stateParams.courseCode).then(function(res){console.log(res),vm.course=res.data,vm.newAssignment.courseID=res.data._id},function(res){})};this.createAssignment=function(){AssignmentFactory.createAssignment($stateParams.courseCode,vm.newAssignment).then(function(res){console.log(res)},function(res){})},getCourse()}])}(),function(){angular.module("user").config(["$stateProvider",function($stateProvider){$stateProvider.state("root.main.dashboard",{templateUrl:"/angular/courses/partials/dashboard.html",controller:"DashboardController",controllerAs:"dashboardCtrl"}),$stateProvider.state("root.course",{url:"/course/:courseCode",templateUrl:"/angular/courses/partials/course.html",controller:"CourseController",controllerAs:"courseCtrl"})}])}(),function(){angular.module("courses").factory("CourseFactory",["$http",function($http){function createCourse(newCourse){return $http.post("/api/course/create",newCourse)}function getCourse(courseCode){return $http.get("/api/course/"+courseCode)}function getCourses(){return $http.get("/api/profile/courses")}return{createCourse:createCourse,getCourse:getCourse,getCourses:getCourses}}])}(),function(){angular.module("general").controller("NavController",["$http","AuthService","AuthResolver","$state",function($http,AuthService,AuthResolver,$state){var vm=this;this.$state=$state,this.bLoggedIn=null,AuthResolver.bIsResolved()?vm.bLoggedIn=AuthService.isAuthenticated():AuthResolver.resolve().then(function(){vm.bLoggedIn=AuthService.isAuthenticated()})}])}(),function(){angular.module("general").config(["$stateProvider",function($stateProvider){$stateProvider.state("root",{"abstract":!0,template:"<ui-view/>",resolve:{auth:["AuthResolver",function(AuthResolver){return AuthResolver.bIsResolved()===!0||AuthResolver.resolve()}]}}).state("root.main",{url:"/",template:"<ui-view/>",controller:["$state","AuthService",function($state,AuthService){AuthService.isAuthenticated()?$state.go("root.main.dashboard"):$state.go("root.main.public")}]}).state("root.main.public",{templateUrl:"/angular/general/partials/index.html",controller:function(){console.log("Hit public index")}})}])}(),function(){angular.module("user").controller("LoginController",["$state","$rootScope","AuthService",function($state,$rootScope,AuthService){var vm=this;this.authMessage="",this.user={email:"",password:""},this.login=function(){AuthService.login(root.user).then(function(res){$state.go("root.main")},function(res){vm.authMessage=res.data.userMessage})}}]),angular.module("user").controller("JoinController",["$state","$rootScope","AuthService",function($state,$rootScope,AuthService){var vm=this;this.authMessage="",this.user={firstName:"",lastName:"",retypePassword:"",password:"",email:"",accountType:""},this.signup=function(){AuthService.signup(root.user).then(function(res){$state.go("root.main")},function(res){vm.authMessage=res.data.userMessage})}}]),angular.module("user").controller("ProfileController",["$state","UserFactory",function($state,UserFactory){this.user=UserFactory.getUser()}])}(),function(){angular.module("user").config(["$stateProvider",function($stateProvider){$stateProvider.state("root.login",{url:"/login",templateUrl:"/angular/user/partials/login.html",controller:"LoginController",controllerAs:"loginCtrl"}),$stateProvider.state("root.join",{url:"/join",templateUrl:"/angular/user/partials/join.html",controller:"JoinController",controllerAs:"joinCtrl"}),$stateProvider.state("root.profile",{url:"/profile",templateUrl:"/angular/user/partials/profile.html",controller:"ProfileController",controllerAs:"profileCtrl"})}])}(),function(){angular.module("user").factory("AuthService",["$http","UserFactory",function($http,UserFactory){function login(credentials){return $http.post("/auth/local",credentials).then(function(res){return UserFactory.setUser(res.data),res.data})}function signup(newUser){return $http.post("/api/user/join",newUser).then(function(res){return UserFactory.setUser(res.data),res.data},function(res){return res.data})}function isAuthenticated(){return UserFactory.live()}return{login:login,signup:signup,isAuthenticated:isAuthenticated}}]),angular.module("user").factory("UserFactory",["$rootScope",function($rootScope){function live(){return Object.keys($rootScope.currentUser).length>0}function setUser(user){$rootScope.currentUser=user}function getUser(){return $rootScope.currentUser}function destroyUser(){$rootScope.currentUser=null}return{live:live,setUser:setUser,getUser:getUser,destroyUser:destroyUser}}]),angular.module("user").factory("AuthResolver",["$q","$rootScope","$state",function($q,$rootScope,$state){var bIsResolved=!1;return{resolve:function(){var deferred=$q.defer(),unwatch=$rootScope.$watch("currentUser",function(currentUser){angular.isDefined(currentUser)&&(currentUser?deferred.resolve(currentUser):deferred.reject(),bIsResolved=!0,unwatch())});return deferred.promise},bIsResolved:function(){return bIsResolved}}}])}();
//# sourceMappingURL=data:application/json;base64,
