!function(){angular.module("assignments",[])}(),function(){angular.module("courses",[])}(),function(){angular.module("misc",[])}(),function(){angular.module("general",[])}(),function(){angular.module("user",[]).run(["$http","UserFactory",function($http,UserFactory){$http.get("/api/profile").success(function(res){UserFactory.setUser(res)}).error(function(res){UserFactory.setUser({})})}])}(),function(){var app=angular.module("grader",["ui.router","general","courses","user","assignments","misc"]);app.config(["$locationProvider",function($locationProvider){$locationProvider.html5Mode(!0)}]),app.run(["$rootScope","AuthService","AuthResolver",function($rootScope,AuthService,AuthResolver){$rootScope.$on("$stateChangeStart",function(event,next){AuthResolver.bIsResolved()?(console.log("stateChangeStart resolved"),console.log("auth: "+AuthService.isAuthenticated())):AuthResolver.resolve().then(function(data){console.log("stateChangeStart not resolved"),console.log("auth: "+AuthService.isAuthenticated())})})}])}(),function(){angular.module("assignments").controller("AssignmentController",["$scope","$stateParams","UserFactory","AssignmentFactory",function($scope,$stateParams,UserFactory,AssignmentFactory){var vm=this;vm.user=UserFactory.getUser(),vm.courseCode=$stateParams.courseCode,vm.assignmentID=$stateParams.assignmentID,vm.assignment={};var getAssignment=function(){AssignmentFactory.getAssignment(vm.courseCode,vm.assignmentID).then(function(assignment){vm.assignment=assignment},function(err){})};this.addQuestion=function(){AssignmentFactory.addQuestion(vm.courseCode,vm.assignmentID).then(function(newQuestion){newQuestion.questionIndex=vm.assignment.questions.length,vm.assignment.content.push(newQuestion),vm.assignment.questions.push(newQuestion)},function(res){})},this.deleteQuestion=function(questionIndex){AssignmentFactory.deleteQuestion(vm.courseCode,vm.assignmentID,questionIndex).then(function(newQuestion){vm.assignment.content.splice(questionIndex,1),$scope.$broadcast("QUESTION_DELETE",questionIndex)},function(res){})},getAssignment()}]).controller("QuestionController",["UserFactory",function(UserFactory){var vm=this;vm.question={},this.logQuestion=function(){console.log(vm.question)}}]).controller("QuestionEditController",["$scope","$stateParams","UserFactory","QuestionFactory",function($scope,$stateParams,UserFactory,QuestionFactory){var vm=this;vm.courseCode=$stateParams.courseCode,vm.assignmentID=$stateParams.assignmentID,vm.question=$scope.$parent.content,$scope.$on("QUESTION_DELETE",function(event,questionIndex){vm.question.questionIndex>questionIndex&&vm.question.questionIndex--}),this.editQuestion=function(bHasEdited){bHasEdited?QuestionFactory.editQuestion(vm.courseCode,vm.assignmentID,vm.question).then(function(res){$scope.editing=!1}):$scope.editing=!1},this.addFillAnswer=function(){vm.question.fillAnswers.push("")},this.deleteFillAnswer=function(index){vm.question.fillAnswers.splice(index,1)},this.addMCOption=function(){vm.question.answerOptions.push("")},this.deleteMCOption=function(index){vm.question.answerOptions.splice(index,1)}}])}(),function(){angular.module("assignments").directive("question",function(){return{restrict:"E",templateUrl:"/angular/assignments/partials/question.html",controller:"QuestionController",controllerAs:"questionCtrl"}}).directive("questionEdit",function(){return{restrict:"E",templateUrl:"/angular/assignments/partials/questionEdit.html",controller:"QuestionEditController",controllerAs:"questionEditCtrl"}})}(),function(){angular.module("assignments").config(["$stateProvider",function($stateProvider){$stateProvider.state("root.assignment",{url:"/course/:courseCode/assignment/:assignmentID",templateUrl:"/angular/assignments/partials/assignment.html",controller:"AssignmentController",controllerAs:"assignmentCtrl"})}])}(),function(){angular.module("assignments").factory("AssignmentFactory",["$http",function($http){function createAssignment(courseCode,newAssignment){return $http.post("/api/course/"+courseCode+"/assignment/create",newAssignment).then(function(res){return res.data})}function getAssignment(courseCode,assignmentID){return $http.get("/api/course/"+courseCode+"/assignment/"+assignmentID).then(function(res){var assignment=res.data,eI=0,qI=0,fI=0;assignment.content=new Array(assignment.questions.length+assignment.exercises.length),console.log(assignment);for(var i=0;i<assignment.contentOrder.length;i++)"exercise"===assignment.contentOrder[i]?(assignment.content[i]=assignment.exercises[eI],assignment.content[i].type="exercise",assignment.content[i].exerciseIndex=eI,eI++):"question"===assignment.contentOrder[i]&&(assignment.content[i]=assignment.questions[qI],assignment.content[i].type="question",assignment.content[i].questionIndex=qI,qI++,"frq"===assignment.content[i].questionType&&(assignment.content[i].frqIndex=fI,fI++));return assignment},function(res){})}function addQuestion(courseCode,assignmentID){return $http.post("/api/course/"+courseCode+"/assignment/"+assignmentID+"/question/create").then(function(res){var newQuestion=res.data;return newQuestion.type="question",newQuestion})}function deleteQuestion(courseCode,assignmentID,questionIndex){var question={questionIndex:questionIndex};return $http.post("/api/course/"+courseCode+"/assignment/"+assignmentID+"/question/delete",question)}return{createAssignment:createAssignment,getAssignment:getAssignment,addQuestion:addQuestion,deleteQuestion:deleteQuestion}}]).factory("QuestionFactory",["$http",function($http){function editQuestion(courseCode,assignmentID,question){return $http.put("/api/course/"+courseCode+"/assignment/"+assignmentID+"/question/edit",question)}return{editQuestion:editQuestion}}])}(),function(){angular.module("user").controller("DashboardController",["$state","$http","CourseFactory","UserFactory",function($state,$http,CourseFactory,UserFactory){var vm=this;this.newCourse={},this.courses=null,this.user=UserFactory.getUser();var getCourses=function(){CourseFactory.getCourses().then(function(res){vm.courses=res.data},function(res){})};this.createCourse=function(){CourseFactory.createCourse(vm.newCourse).then(function(res){console.log(res)})},getCourses()}]),angular.module("user").controller("CourseController",["$state","$http","$stateParams","UserFactory","CourseFactory","AssignmentFactory",function($state,$http,$stateParams,UserFactory,CourseFactory,AssignmentFactory){var vm=this;vm.course=null,vm.user=UserFactory.getUser(),vm.newAssignment={};var getCourse=function(){CourseFactory.getCourse($stateParams.courseCode).then(function(res){vm.course=res.data},function(res){})};this.createAssignment=function(){AssignmentFactory.createAssignment($stateParams.courseCode,vm.newAssignment).then(function(assignment){vm.course.assignments.push(assignment)},function(res){})},getCourse()}])}(),function(){angular.module("user").config(["$stateProvider",function($stateProvider){$stateProvider.state("root.main.dashboard",{templateUrl:"/angular/courses/partials/dashboard.html",controller:"DashboardController",controllerAs:"dashboardCtrl"}),$stateProvider.state("root.course",{url:"/course/:courseCode",templateUrl:"/angular/courses/partials/course.html",controller:"CourseController",controllerAs:"courseCtrl"})}])}(),function(){angular.module("courses").factory("CourseFactory",["$http",function($http){function createCourse(newCourse){return $http.post("/api/course/create",newCourse)}function getCourse(courseCode){return $http.get("/api/course/"+courseCode)}function getCourses(){return $http.get("/api/profile/courses")}return{createCourse:createCourse,getCourse:getCourse,getCourses:getCourses}}])}(),function(){"use strict";function clickOutside($document,$parse,$timeout){return{restrict:"A",link:function($scope,elem,attr){console.log("hi"),$timeout(function(){function eventHandler(e){if(!angular.element(elem).hasClass("ng-hide")){var element,i=0;if(e&&e.target){for(element=e.target;element;element=element.parentNode){var id=element.id,classNames=element.className,l=classList.length;for(classNames&&void 0!==classNames.baseVal&&(classNames=classNames.baseVal),i=0;l>i;i++)if(void 0!==id&&id===classList[i]||classNames&&classNames===classList[i])return}return $scope.$apply(function(){return(fn=$parse(attr.clickOutside))($scope)})}}}function _hasTouch(){return"ontouchstart"in window||navigator.maxTouchPoints}var fn,classList=void 0!==attr.outsideIfNot?attr.outsideIfNot.replace(", ",",").split(","):[];void 0!==attr.id&&classList.push(attr.id),_hasTouch()&&$document.on("touchstart",eventHandler),$document.on("click",eventHandler),$scope.$on("$destroy",function(){_hasTouch()&&$document.off("touchstart",eventHandler),$document.off("click",eventHandler)})})}}}clickOutside.$inject=["$document","$parse","$timeout"],angular.module("misc").directive("clickOutside",clickOutside)}(),function(){angular.module("general").controller("NavController",["$rootScope","$scope","$http","AuthService","AuthResolver","$state",function($rootScope,$scope,$http,AuthService,AuthResolver,$state){var vm=this;vm.$state=$state,vm.bLoggedIn=null,vm.homeState="root.main.dashboard",console.log($rootScope);var checkAuth=function(){AuthResolver.bIsResolved()?vm.bLoggedIn=AuthService.isAuthenticated():AuthResolver.resolve().then(function(){vm.bLoggedIn=AuthService.isAuthenticated()})};$rootScope.$watch("currentUser",function(){checkAuth()}),$scope.$watch("navCtrl.bLoggedIn",function(bLoggedIn){bLoggedIn?vm.homeState="root.main.dashboard":vm.homeState="root.main.public"}),checkAuth()}])}(),function(){angular.module("general").config(["$stateProvider",function($stateProvider){$stateProvider.state("root",{"abstract":!0,template:"<ui-view/>",resolve:{auth:["AuthResolver",function(AuthResolver){return AuthResolver.bIsResolved()===!0||AuthResolver.resolve()}]}}).state("root.main",{url:"/",template:"<ui-view/>",controller:["$state","AuthService",function($state,AuthService){console.log("blackmale"),AuthService.isAuthenticated()?$state.go("root.main.dashboard"):$state.go("root.main.public")}]}).state("root.main.public",{templateUrl:"/angular/general/partials/index.html",controller:function(){console.log("Hit public index")}})}])}(),function(){angular.module("user").controller("LoginController",["$state","$rootScope","AuthService",function($state,$rootScope,AuthService){var vm=this;vm.authMessage="",vm.user={email:"",password:""},this.login=function(){AuthService.login(vm.user).then(function(res){$state.go("root.main")},function(res){vm.authMessage=res.data.userMessage})}}]),angular.module("user").controller("JoinController",["$state","$rootScope","AuthService",function($state,$rootScope,AuthService){var vm=this;vm.authMessage="",vm.user={firstName:"",lastName:"",retypePassword:"",password:"",email:"",accountType:""},this.signup=function(){AuthService.signup(vm.user).then(function(res){$state.go("root.main")},function(res){vm.authMessage=res.data.userMessage})}}]),angular.module("user").controller("ProfileController",["$state","UserFactory",function($state,UserFactory){this.user=UserFactory.getUser()}])}(),function(){angular.module("user").config(["$stateProvider",function($stateProvider){$stateProvider.state("root.login",{url:"/login",templateUrl:"/angular/user/partials/login.html",controller:"LoginController",controllerAs:"loginCtrl"}),$stateProvider.state("root.join",{url:"/join",templateUrl:"/angular/user/partials/join.html",controller:"JoinController",controllerAs:"joinCtrl"}),$stateProvider.state("root.profile",{url:"/profile",templateUrl:"/angular/user/partials/profile.html",controller:"ProfileController",controllerAs:"profileCtrl"})}])}(),function(){angular.module("user").factory("AuthService",["$http","UserFactory",function($http,UserFactory){function login(credentials){return $http.post("/auth/local",credentials).then(function(res){return UserFactory.setUser(res.data),res.data})}function signup(newUser){return $http.post("/api/user/join",newUser).then(function(res){return UserFactory.setUser(res.data),res.data},function(res){return res.data})}function isAuthenticated(){return UserFactory.live()}return{login:login,signup:signup,isAuthenticated:isAuthenticated}}]),angular.module("user").factory("UserFactory",["$rootScope",function($rootScope){function live(){return Object.keys($rootScope.currentUser).length>0}function setUser(user){$rootScope.currentUser=user}function getUser(){return $rootScope.currentUser}function destroyUser(){$rootScope.currentUser=null}return{live:live,setUser:setUser,getUser:getUser,destroyUser:destroyUser}}]),angular.module("user").factory("AuthResolver",["$q","$rootScope","$state",function($q,$rootScope,$state){var bIsResolved=!1;return{resolve:function(){var deferred=$q.defer(),unwatch=$rootScope.$watch("currentUser",function(currentUser){angular.isDefined(currentUser)&&(currentUser?deferred.resolve(currentUser):deferred.reject(),bIsResolved=!0,unwatch())});return deferred.promise},bIsResolved:function(){return bIsResolved}}}])}();
//# sourceMappingURL=data:application/json;base64,
